const mongoose = require('mongoose');
require('dotenv').config();

const testMongoDB = async () => {
  try {
    console.log('üöÄ Testing MongoDB Atlas connection...');
    console.log(`üìã Connection URI: ${process.env.MONGO_URI?.replace(/:[^:@]*@/, ':***@')}`);
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ Connected to MongoDB Atlas successfully!');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const db = mongoose.connection.db;
    const admin = db.admin();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const serverStatus = await admin.serverStatus();
    console.log('\nüìä Server Information:');
    console.log(`  - MongoDB Version: ${serverStatus.version}`);
    console.log(`  - Host: ${serverStatus.host}`);
    console.log(`  - Uptime: ${Math.round(serverStatus.uptime / 3600)} hours`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await db.listCollections().toArray();
    console.log('\nüìÅ Collections in database:');
    if (collections.length === 0) {
      console.log('  - No collections found (database is empty)');
    } else {
      for (const collection of collections) {
        const count = await db.collection(collection.name).countDocuments();
        console.log(`  - ${collection.name}: ${count} documents`);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
    console.log('\nüß™ Testing database operations...');
    const testCollection = db.collection('connection_test');
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const testDoc = { 
      message: 'Connection test', 
      timestamp: new Date(),
      test: true 
    };
    const insertResult = await testCollection.insertOne(testDoc);
    console.log('  ‚úÖ Write operation successful');
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const foundDoc = await testCollection.findOne({ _id: insertResult.insertedId });
    console.log('  ‚úÖ Read operation successful');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    await testCollection.deleteOne({ _id: insertResult.insertedId });
    console.log('  ‚úÖ Delete operation successful');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîê Checking database permissions...');
    try {
      const stats = await db.stats();
      console.log(`  ‚úÖ Database stats accessible (${stats.collections} collections, ${Math.round(stats.dataSize / 1024)} KB)`);
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Limited access to database stats');
    }
    
    console.log('\nüéâ MongoDB Atlas is ready to use!');
    
  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error.message);
    
    if (error.message.includes('authentication failed')) {
      console.error('üîë Authentication failed. Please check your username and password in MONGO_URI');
    } else if (error.message.includes('network')) {
      console.error('üåê Network error. Please check your internet connection and MongoDB Atlas network access');
    } else if (error.message.includes('timeout')) {
      console.error('‚è∞ Connection timeout. Please check your network and MongoDB Atlas configuration');
    } else {
      console.error('üîß Configuration error. Please check your MONGO_URI in .env file');
    }
    
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Database connection closed');
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testMongoDB();
}

module.exports = testMongoDB; 