const mongoose = require('mongoose');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
const User = require('../models/userModel');
const Post = require('../models/postModel');
const Like = require('../models/likeModel');
const Comment = require('../models/commentModel');
const Follow = require('../models/followModel');
const Notification = require('../models/notificationModel');

const runMigration = async () => {
  try {
    console.log('üöÄ Starting initial database setup...');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ Connected to MongoDB Atlas');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üìù Creating user indexes...');
    await User.collection.createIndex({ email: 1 }, { unique: true });
    await User.collection.createIndex({ username: 1 }, { unique: true });
    await User.collection.createIndex({ username: 'text', fullName: 'text' });
    console.log('‚úÖ User indexes created');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤
    console.log('üìù Creating post indexes...');
    await Post.collection.createIndex({ author: 1, createdAt: -1 });
    await Post.collection.createIndex({ createdAt: -1 });
    await Post.collection.createIndex({ tags: 1 });
    console.log('‚úÖ Post indexes created');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ª–∞–π–∫–æ–≤
    console.log('üìù Creating like indexes...');
    await Like.collection.createIndex({ user: 1, post: 1 }, { unique: true });
    await Like.collection.createIndex({ post: 1 });
    await Like.collection.createIndex({ user: 1 });
    console.log('‚úÖ Like indexes created');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    console.log('üìù Creating comment indexes...');
    await Comment.collection.createIndex({ post: 1, createdAt: -1 });
    await Comment.collection.createIndex({ author: 1 });
    console.log('‚úÖ Comment indexes created');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
    console.log('üìù Creating follow indexes...');
    await Follow.collection.createIndex({ follower: 1, following: 1 }, { unique: true });
    await Follow.collection.createIndex({ follower: 1 });
    await Follow.collection.createIndex({ following: 1 });
    console.log('‚úÖ Follow indexes created');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log('üìù Creating notification indexes...');
    await Notification.collection.createIndex({ recipient: 1, createdAt: -1 });
    await Notification.collection.createIndex({ recipient: 1, isRead: 1 });
    await Notification.collection.createIndex({ sender: 1 });
    console.log('‚úÖ Notification indexes created');

    console.log('üéâ Initial database setup completed successfully!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('\nüìä Created collections:');
    collections.forEach(collection => {
      console.log(`  - ${collection.name}`);
    });

  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Database connection closed');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runMigration();
}

module.exports = runMigration; 