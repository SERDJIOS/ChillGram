import { useEffect, useRef, useState } from 'react';
import { io } from 'socket.io-client';

const useSocket = () => {
  const socketRef = useRef(null);
  const [isConnected, setIsConnected] = useState(false);
  const [activeUsers, setActiveUsers] = useState([]);

  useEffect(() => {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    
    // Socket connection attempt
    
    if (!token) {
      console.warn('‚ùå No token found, skipping socket connection');
      return;
    }

    if (!user) {
      console.warn('‚ùå No user data found in localStorage');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if (token.length < 10) {
      console.error('‚ùå Token seems too short:', token.length);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è
    try {
      const userData = JSON.parse(user);
      if (!userData.id) {
        console.error('‚ùå User data missing ID:', userData);
        return;
      }
      // User data valid
    } catch (e) {
      console.error('‚ùå Invalid user data in localStorage:', e);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Socket.IO
    const verifyToken = async () => {
      try {
        const response = await fetch('http://localhost:3001/api/auth/verify-token', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          console.error('‚ùå Token verification failed:', response.status);
          // –û—á–∏—â–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          return false;
        }

        const data = await response.json();
        // Token verified successfully
        return true;
      } catch (error) {
        console.error('‚ùå Token verification error:', error);
        return false;
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    verifyToken().then(isValid => {
      if (!isValid) {
        console.warn('‚ùå Invalid token, skipping socket connection');
        return;
      }

      // Creating Socket.IO connection

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.io
    socketRef.current = io('http://localhost:3001', {
      auth: {
        token: token
      },
        autoConnect: true,
        timeout: 20000,
        forceNew: true
    });

    const socket = socketRef.current;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
      // Connected to Socket.io server
      // Socket ID logged
      setIsConnected(true);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      socket.emit('getActiveUsers');
    });

    socket.on('disconnect', () => {
      // Disconnected from Socket.io server
      setIsConnected(false);
    });

    socket.on('connect_error', (error) => {
        console.error('‚ùå Socket connection error:', error.message);
      setIsConnected(false);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (error.message.includes('Authentication') || error.message.includes('token')) {
          console.warn('üîÑ Authentication error, token might be invalid');
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –ª–æ–≥–∏–Ω
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    socket.on('userOnline', (data) => {
      // User came online
      setActiveUsers(prev => {
        const exists = prev.find(user => user.userId === data.userId);
        if (!exists) {
          return [...prev, data];
        }
        return prev;
      });
    });

    socket.on('userOffline', (data) => {
      // User went offline
      setActiveUsers(prev => prev.filter(user => user.userId !== data.userId));
    });

    socket.on('activeUsers', (users) => {
      // Active users logged
      setActiveUsers(users);
      });
    });

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = (receiverId, text, messageType = 'text') => {
    return new Promise((resolve, reject) => {
      if (!socketRef.current || !isConnected) {
        reject(new Error('Socket not connected'));
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageId = Date.now() + Math.random();
      
      // –°–ª—É—à–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const handleMessageSent = (message) => {
        socketRef.current.off('messageSent', handleMessageSent);
        socketRef.current.off('error', handleError);
        resolve(message);
      };

      const handleError = (error) => {
        socketRef.current.off('messageSent', handleMessageSent);
        socketRef.current.off('error', handleError);
        reject(new Error(error.message || 'Failed to send message'));
      };

      socketRef.current.on('messageSent', handleMessageSent);
      socketRef.current.on('error', handleError);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      socketRef.current.emit('sendMessage', {
        receiverId,
        text,
        messageType,
        messageId
      });

      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏–¥–µ—Ç
      setTimeout(() => {
        socketRef.current.off('messageSent', handleMessageSent);
        socketRef.current.off('error', handleError);
        reject(new Error('Message send timeout'));
      }, 10000);
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const markAsRead = (senderId) => {
    if (socketRef.current && isConnected) {
      socketRef.current.emit('markAsRead', { senderId });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞
  const sendTyping = (receiverId, isTyping) => {
    if (socketRef.current && isConnected) {
      socketRef.current.emit('typing', { receiverId, isTyping });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  const on = (event, callback) => {
    if (socketRef.current) {
      socketRef.current.on(event, callback);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  const off = (event, callback) => {
    if (socketRef.current) {
      socketRef.current.off(event, callback);
    }
  };

  return {
    socket: socketRef.current,
    isConnected,
    activeUsers,
    sendMessage,
    markAsRead,
    sendTyping,
    on,
    off
  };
};

export default useSocket; 